<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<!-- WebApp_ID is NOT related to the version ID it is the servlet version to be used -->
	<display-name>2.2.4release</display-name>
	<!-- Backend Servlets start here -->


	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!-- Servlets und Mapping-->

	<servlet>
		<servlet-name>uploadfile</servlet-name>
		<servlet-class>org.dhbw.imbit11.UploadServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>uploadfile</servlet-name>
		<url-pattern>/Upload</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>viewfile</servlet-name>
		<servlet-class>org.dhbw.imbit11.FileViewer</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>viewfile</servlet-name>
		<url-pattern>/View</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>viewnode</servlet-name>
		<servlet-class>org.dhbw.imbit11.NodeViewer</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>viewnode</servlet-name>
		<url-pattern>/Node</url-pattern>
	</servlet-mapping>


	<filter>
		<filter-name>ShiroFilter</filter-name>
		<filter-class>org.apache.shiro.web.servlet.IniShiroFilter</filter-class>
		<init-param>
			<param-name>config</param-name>
			<param-value>
                #See Shiro API http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/servlet/IniShiroFilter.html
                
                #create an object of the RoleSecurityJdbcRealm
                #IniShiroFilter will inject that object into the SecurityManager
                [main]
                realmA = org.dhbw.imbit11.backend.RoleSecurityJdbcRealm
                
                hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true
# privateSalt needs to be base64-encoded in shiro.ini but not in the Java code
hashService.privateSalt = VyFyUyFuZElNQiFUMjAxMSQmJA==
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService
passwordMatcher.passwordService = $passwordService
realmA.credentialsMatcher = $passwordMatcher
                
                #this application will use all the default
                #filters (see link above)
                #for example the default login page is /login.jsp
                #users who try to access a page protected by Shiro
                #will be sent to /login.jsp
                [filters]


                #only let authenticated users
                #with the appropriate role
                #view the web pages in the secure
                #and admin areas
                [urls]
                /LoginUser = anon
                /frontend/imprint.jsp = anon
                
                /Student authc, roles[student]
                /Main = authc, roles[student]
                /frontend/* = authc, roles[student]
                /frontend/imprint.jsp = anon
                
                
				/Admin = authc, roles[admin]
				/backend/homepage_admin.jsp = authc, roles[admin]
				/DeleteProfessor = authc, roles[admin]
				
				/Professor = authc, roles[professor]
				/backend/homepage_professor.jsp = authc, roles[professor]
				/backend/sendRegistrationLink.jsp = authc, roles[professor]
				/NewUsergroup = authc, roles[professor]
				/SendRegistrationLink = authc, roles[professor]
				/DeleteGroup = authc, roles[professor]
				/DeleteUser = authc, roles[professor]
				
            </param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>ShiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<resource-ref>
		<res-ref-name>jdbc/security</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
		<res-sharing-scope>Shareable</res-sharing-scope>
	</resource-ref>

	<context-param>
		<param-name>domain</param-name>
		<param-value>https://ec2-54-213-27-83.us-west-2.compute.amazonaws.com</param-value>
	</context-param>
	
	<!-- Context Parameter for Mail -->	
	
	<context-param>
		<description>Mail-Server for outgoing mails</description>
		<param-name>mailserver</param-name>
		<param-value>smtp.1und1.de</param-value>
	</context-param>
	
	<context-param>
		<description>Mailport for SMTP-Server</description>
		<param-name>mailport</param-name>
		<param-value>587</param-value>
	</context-param>
	
	<context-param>
		<description>Mail-User for mailserver</description>
		<param-name>mailuser</param-name>
		<param-value>no-reply@brillianCRM.com</param-value>
	</context-param>
	
	<context-param>
		<description>Password for Mail-User</description>
		<param-name>mailpw</param-name>
		<param-value>wibi12c</param-value>
	</context-param>
	
	<context-param>
		<description>Setting for SMTP authentification</description>
		<param-name>smtpauth</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<context-param>
		<description>Setting for SMTP TLS</description>
		<param-name>smtptls</param-name>
		<param-value>true</param-value>
	</context-param>
	
<!--  
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>SSL</web-resource-name>
			<url-pattern>/*</url-pattern>
		</web-resource-collection>
		<user-data-constraint>
			<transport-guarantee>CONFIDENTIAL</transport-guarantee>
		</user-data-constraint>
	</security-constraint>
	-->
</web-app>
